var readline = require('readline');
var _ = require('lodash');
var semver = require('semver');
var clc = require('cli-color');
var fs = require('fs');
var path = require('path');
var argv = require('minimist')(process.argv.slice(2));

var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

var allowedOptions = ['major', 'minor', 'patch'];

var error = clc.red.bold;
var important = clc.yellow.bold;
var highlight = clc.underline;

// Get the path to the config file we're updating
var configFile = (argv._.length === 1) ? argv._[0] : './package.json';
var configFilePath = path.join(__dirname, configFile);

// Make sure this file exists
fs.readFile(configFilePath, function(err, configString) {
    if (err) {
        process.stdout.write(error('Error while reading ' + configFilePath + '\n'));
        process.exit(1);
    }

    process.stdout.write('This will bump the version number according to semver\n');
    process.stdout.write('File to update: ' + highlight(configFilePath) + '\n');
    process.stdout.write('\n');
    process.stdout.write(important('major') + ': We are releasing a change that includes ' + highlight('any backwards-incompatible change\n'));
    process.stdout.write(important('minor') + ': We are releasing a change that has new features, but is backwards-compatible with any existing consumers\n');
    process.stdout.write(important('patch') + ': This is a bugfix release or only has other minor changes with no changes to the interfaces\n');
    process.stdout.write('\n');

    rl.question('What type of release is this? (' + allowedOptions.join(' | ') + ') ', function(answer) {
        rl.close();
        if (!_.includes(allowedOptions, answer)) {
            process.stdout.write(error('You must specify one of the following options: ' + allowedOptions.join(', ') + '\n'));
            process.exit(1);
        }

        var configJson = JSON.parse(configString);
        var version = configJson.version;

        process.stdout.write('\n');
        process.stdout.write('Old version was: ' + important(version) + '\n');

        var newVersion = semver.inc(version, answer);
        process.stdout.write('New version is: ' + important(newVersion) + '\n');
        process.stdout.write('\n');

        configString = configString.toString().replace('"version": "' + version + '"', '"version": "' + newVersion + '"');

        fs.writeFile(configFilePath, configString, function(err) {
            if (err) {
                process.stdout.write(error('Error while writing to ' + configFilePath + '\n'));
                return process.exit(1);
            }

            process.stdout.write('Done updating file. Now commit those changes to git.\n');
            process.stdout.write('Suggested commit: ' + clc.bold('git commit -m "Bumped version from ' + version + ' to ' + newVersion + '"\n'));

            process.exit(0);

        });

    });

});
